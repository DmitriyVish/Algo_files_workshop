"""–ó–∞–¥–∞—á–∞ 1: –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ JSON
 –ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á (To-Do List). –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ tasks.json.
        –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –º–µ–Ω—é:
       Create - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Å—Ç–∞—Ç—É—Å ¬´–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ¬ª).
       Read - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏.
       Update - –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é (–ø–æ –Ω–æ–º–µ—Ä—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é).
       Delete - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É.
    –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ —Ñ–∞–π–ª.
"""

import os 
import sys 
import json 
import uuid
from datetime import datetime 
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QPushButton, QLineEdit, QMessageBox,
    QLabel, QTableWidget, QTableWidgetItem, QHeaderView
)
from PyQt5.QtCore import Qt, QSize
from PyQt5.QtGui import QFont, QIcon

"""–õ–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

class ToDoList():
    def __init__(self, filename: str = "files/todolist.json"):
        self.filename = filename
        os.makedirs(os.path.dirname(self.filename), exist_ok=True)
        self.notes = self.json_load()        
        
    def save(self):
        """–ú–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–º–µ—Ç–∫—É –≤ json-—Ñ–∞–π–ª"""        
        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
        with open(self.filename, "w", encoding="utf-8") as file:
            json.dump(self.notes, file, ensure_ascii=False, indent=4)
            
        print(f"–ó–∞–º–µ—Ç–∫–∞ {self.note} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫: {len(self.notes)}")
                    
    def json_load(self):
        """–ú–µ—Ç–æ–¥ —á–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –≤ —Å–ø–∏—Å–æ–∫"""
        notes = []
        if not os.path.exists(self.filename):            
            print(f"–§–∞–π–ª —Å –∏–º–µ–Ω–µ–º {self.filename} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return []
        if os.path.getsize(self.filename) == 0:
            print("–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø–∏—Å–µ–π")  
            return [] 
        try:
            with open(self.filename, "r", encoding="utf-8") as file:                        
                notes = json.load(file)
                return notes                      
        except OSError:
            print("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞") 
            return [] 
    
    @staticmethod    
    def get_month(month: int) -> str:
        """–ú–µ—Ç–æ–¥ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ –≤ —Å—Ç—Ä–æ—á–Ω—É—é –∑–∞–ø–∏—Å—å"""
        months = ["–Ø–Ω–≤–∞—Ä—è", "–§–µ–≤—Ä–∞–ª—è", "–ú–∞—Ä—Ç–∞", "–ê–ø—Ä–µ–ª—è", "–ú–∞—è", "–ò—é–Ω—è", 
                "–ò—é–ª—è", "–ê–≤–≥—É—Å—Ç–∞", "–°–µ–Ω—Ç—è–±—Ä—è", "–û–∫—Ç—è–±—Ä—è", "–ù–æ—è–±—Ä—è", "–î–µ–∫–∞–±—Ä—è"]
        return months[month - 1]
        
    @staticmethod
    def get_day_of_week(day: int) -> str:
        """–ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
        days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", 
           "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        return days[day]    
       
    def get_date_time(self):
        """–ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Ç–µ–∫—É—â–∏–º
        –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏, –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º"""
        date = str(datetime.now().day) + " " + str(self.get_month(datetime.now().month)) + " " + str(datetime.now().year)
        time = str(datetime.now().hour) + ":" + str(datetime.now().minute) + ":" + str(datetime.now().second)
        weekday = str(self.get_day_of_week(datetime.now().weekday()))
        return f"{weekday} {date} : {time}"
    
class NotePreprocessor(ToDoList):
    """–ö–ª–∞—Å—Å –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç ToDoList
    –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –∑–∞–º–µ—Ç–æ–∫"""
    def __init__(self):
        super().__init__()
        self.done = False
        self.time = self.get_date_time()
        self.note_text = ""
        self.note = {}    
        
    def create(self, note_text: str):
        """–ú–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è"""
        if not note_text.strip():
            print("–ó–∞–º–µ—Ç–∫–∞ –ø—É—Å—Ç–∞—è")
            return
        new_note = {
            "id": str(uuid.uuid4()),
            "–ù–∞–∑–≤–∞–Ω–∏–µ": note_text.strip(),
            "–°—Ç–∞—Ç—É—Å": False,
            "–í—Ä–µ–º—è": self.get_date_time()
            }
        self.notes.append(new_note)  # ‚Üê –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
        self.note = new_note   
                                
    def update(self, number: int):
        """–ó–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ True"""        
        if not self.notes:
            print("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫")
            return None        
        note = self.find_note(number, self.notes)  
        if note and not note["–°—Ç–∞—Ç—É—Å"]:
            note["–°—Ç–∞—Ç—É—Å"] = True 
            # print("–°—Ç–∞—Ç—É—Å –∑–∞–º–µ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω")
            self.save()
            return 0 
        
    def read(self):
        """–ú–µ—Ç–æ–¥ –ø–µ—á–∞—Ç–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
        notes = self.json_load()
        # if not notes:
        #     # print("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫")        
        # for index, note in enumerate(notes):
        #     print("="*20, f"–ó–∞–º–µ—Ç–∫–∞ ‚Ññ {index + 1}", "="*40)
        #     for key, value in note.items():
        #         if key != "id":
        #             print(f"{key}: {value}")
        #     print("="*73)
            
    def find_note(self, number: int, notes: list):
        "–ú–µ—Ç–æ–¥ –∏—â–µ—Ç –∑–∞–º–µ—Ç–∫—É –ø–æ –Ω–æ–º–µ—Ä—É"
        try:
            assert type(number) is int
        except AssertionError:
            print("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
            return None      
        if 1 <= number <= len(notes):
            return notes[number - 1]
        else:
            print("–ó–∞–º–µ—Ç–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
        
    def delete(self, number: int):
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É –ø–æ –Ω–æ–º–µ—Ä—É"""
        if not isinstance(number, int):
            print("–ù–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
            return
        if 1 <= number <= len(self.notes):
            removed_note = self.notes.pop(number - 1)
            self.save()
            print(f"–ó–∞–º–µ—Ç–∫–∞ '{removed_note['–ù–∞–∑–≤–∞–Ω–∏–µ']}' —É–¥–∞–ª–µ–Ω–∞.")
        else:
            print(f"–ó–∞–º–µ—Ç–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º {number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        
"""–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
            
class ToDoApp(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. 
    –ù–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç QMainWindow""" 
    def __init__(self):
        super().__init__()
        self.todo = NotePreprocessor()
        self.init_ui()
        self.load_notes() 
        
    def init_ui(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å""" 
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
        self.setWindowTitle(f"–ê–Ω–Ω–∏–≥–∏–ª—è—Ç–æ—Ä —Å—Ä–æ—á–Ω—ã—Ö –¥–µ–ª")
        self.setWindowIcon(QIcon("icon/icon.png"))
        self.resize(600, 500)
        
        # –°—Ç–∏–ª–∏
        self.setStyleSheet("""
            QMainWindow { 
            background-color: #35C0CD;
            font-size: 14px;
            }           
            QPushButton {
                background-color: #028E9B;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover { background-color: #015C65; }
            QPushButton:disabled { background-color: #5EC4CD; }
            QLineEdit {
                padding: 8px;
                border: 1px solid #ccc;
                border-radius: 4px;
            }                      
            QHeaderView::section {
                font-size: 14px;
                font-weight: bold;
                color: #333;
                background-color: #5EC4CD;
                padding: 6px;
                border: 1px solid #ccc;
            }
            QTableWidget {
                font-size: 12px;                
                color: #333;
            }
        """)
    
        # –ì–ª–∞–≤–Ω—ã–π –≤–∏–¥–∂–µ—Ç –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –ª—ç–π–∞—É—Ç
        main = QWidget()
        self.setCentralWidget(main)
        VLayout = QVBoxLayout(main)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–ú–æ–π —Å–ø–∏—Å–æ–∫ –≤—ã–∂–∏–≤—à–µ–≥–æ")
        title.setAlignment(Qt.AlignCenter)
        title.setFont(QFont("Lucida Sans Unicode", 18, QFont.Bold))
        VLayout.addWidget(title)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ + –¥–æ–±–∞–≤–∏—Ç—å
        input_layout = QHBoxLayout()
        self.note_input = QLineEdit()
        self.note_input.setPlaceholderText("–ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å, –≤—ã–≤–∞–ª–∏–≤–∞–π—Ç–µ —Å—é–¥–∞ —Å–≤–æ–∏ –¥–µ–ª–∞! üóëÔ∏è")
        self.add_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏ –∑–∞–±—ã—Ç—å")
        self.add_btn.clicked.connect(self.add_note) # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É
        input_layout.addWidget(self.note_input)
        input_layout.addWidget(self.add_btn)        
        VLayout.addLayout(input_layout)
        
        # –í–∏–¥–∂–µ—Ç –∑–∞–º–µ—Ç–æ–∫
        self.note_table = QTableWidget()
        self.note_table.setColumnCount(3)
        self.note_table.setHorizontalHeaderLabels(["–°–ø–∏—Å–æ–∫ –¥–µ–ª –≤—ã–∂–∏–≤—à–µ–≥–æ",
                                                   "–°—Ç–∞—Ç—É—Å –≤—ã–∂–∏–≤–∞–Ω–∏—è",
                                                   "–¢–æ—á–∫–∞ –æ—Ç—Å—á—ë—Ç–∞"])        
        self.note_table.setSelectionBehavior(self.note_table.SelectRows)
        self.note_table.setEditTriggers(self.note_table.NoEditTriggers) # –ó–∞–ø—Ä–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        header = self.note_table.horizontalHeader()
        header.setSectionResizeMode(2, header.Stretch)  
        VLayout.addWidget(self.note_table)
        
        # –ö–Ω–æ–ø–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        btn_layout = QHBoxLayout()
        self.done_btn = QPushButton("‚úÖ –ú–∏—Å—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        self.delete_btn = QPushButton("üóë –ê–Ω–Ω–∏–≥–∏–ª–∏—Ä–æ–≤–∞—Ç—å")
        self.done_btn.clicked.connect(self.mark_done)
        self.delete_btn.clicked.connect(self.remove_note)
        btn_layout.addWidget(self.done_btn)
        btn_layout.addWidget(self.delete_btn)
        VLayout.addLayout(btn_layout)

        self.update_button_states()
        self.note_table.itemSelectionChanged.connect(self.update_button_states)

    def update_button_states(self):
        selected = bool(self.note_table.selectedItems())
        self.done_btn.setEnabled(selected)
        self.delete_btn.setEnabled(selected)

    def load_notes(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –≤ QTableWidget"""
        self.note_table.setRowCount(0) # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤        
        for note in self.todo.notes:
            row = self.note_table.rowCount()
            self.note_table.insertRow(row)
        
            title_note = QTableWidgetItem(note.get("–ù–∞–∑–≤–∞–Ω–∏–µ", ""))
            status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if note.get("–°—Ç–∞—Ç—É—Å") else "‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ"
            status_note = QTableWidgetItem(status)
            status_note.setTextAlignment(Qt.AlignCenter)
            date_note = QTableWidgetItem(note.get("–í—Ä–µ–º—è", ""))
            
            self.note_table.setItem(row, 0, title_note)
            self.note_table.setItem(row, 1, status_note)
            self.note_table.setItem(row, 2, date_note)
            
    def add_note(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
        text = self.note_input.text().strip()
        if not text:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞!", "–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É!")
            return 
        self.todo.create(text)
        self.todo.save()
        self.note_input.clear()
        self.load_notes()
        
    def get_selected_row(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É"""
        selected = self.note_table.selectionModel().selectedRows()
        return selected[0].row() if selected else None
    
    def mark_done(self):
        """–û—Ç–º–µ—á–∞–µ—Ç –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é,
        –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–π–ª"""      
        row = self.get_selected_row()
        if row is not None:
            self.todo.update(row + 1)  # –ø–æ—Ç–æ–º—É —á—Ç–æ update –æ–∂–∏–¥–∞–µ—Ç –Ω–æ–º–µ—Ä —Å 1
            self.load_notes()    
 
    def remove_note(self):
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–π–ª"""
        row = self.get_selected_row()
        if row is None:
            return
        notes = self.todo.json_load()
        if 0 <= row < __builtins__.len(self.todo.notes):
            removed = self.todo.notes.pop(row)
            self.todo.save()
            QMessageBox.information(self, "–ê–Ω–Ω–∏–≥–∏–ª–∏—Ä–æ–≤–∞–Ω–æ!", f"–ó–∞–¥–∞—á–∞ '{removed['–ù–∞–∑–≤–∞–Ω–∏–µ']}' —É–¥–∞–ª–µ–Ω–∞.")
            self.load_notes() 
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")        
        

"""–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
 
if __name__ == "__main__":
    app = QApplication(sys.argv)     
    window = ToDoApp()             
    window.show()                     
    sys.exit(app.exec_())             
                    


